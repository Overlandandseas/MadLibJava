import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.net.ServerSocket;
import java.net.Socket;


public class MadLibsServer {
	
	public static void main (String[] args) {
		int max_clients = 100;
		
		//Usage
		if ( !(args.length >= 1) ) {
			System.out.println("Usage:");
			System.out.println("     java MadLibsServer");
			return;
		}
		
		//Get port number from args
		int port = Integer.valueOf(args[0]);
		
		try {
			//Get socket and start the server
			ServerSocket server_socket = new ServerSocket(port);
			System.out.println("MadLibsServer: running...");
			
			//Declare variables to be used in server loop
			Socket remote_socket;
			DataOutputStream output;
			DataInputStream input;
			Thread[] handlers = new Thread[max_clients]; //Array of MadLibsHandler threads
			
			while ( true ) { //WE NEVER STOP SERVING QUALITY MADLIBS
				remote_socket = server_socket.accept();
				
			}
		} catch (Exception e) {
			System.out.println("Exception: " + e.getClass().toString());
			System.out.println("\t" + e.getMessage());
		}
	}
	
	/**
	 * Checks to see if an array of threads is full.
	 * @param thread_array
	 * @return 	if not full, returns next empty index
	 * 			if full, returns -1
	 */
	private int next_empty (Thread[] thread_array) {
		for (int i=0; i<thread_array.length; i++) {
			if (thread_array[i] == null)
				return i;
		}
		return -1;
	}
	
	/**
	 * Inserts a thread into thread_array
	 * @param thread
	 * @param thread_array
	 * @return  if successful, returns true
	 * 			else, returns false
	 */
	private boolean insert_thread (Thread thread, Thread[] thread_array) {
		int next_empty_index = next_empty(thread_array);
		if (next_empty_index == -1)
			return false;
		
		//Insert thread into array
		thread_array[next_empty_index] = thread;
		return true;
	}
}
